decl byte* malloc(int sz);
decl void free(byte* ptr);
decl void memset(byte* ptr, byte val, int sz);
decl void printf(char* fmt, ...);
decl void puts(char* str);
decl void putchar(char);
decl float sqrtf(float);

decl long clock();

public void main ->
	run();

public void run {
	long start = clock();
	
	int passes = 0;
	Sieve test;
	
	puts('Running sieve for 5s...');
	
	while ((clock() - start) < 5000) {
		test = sieve(1000000);
		passes += 1;
		free(test.arr);
	}
	
	long end = clock();
	
	// run one last time since we free it in while loop
	test = sieve(1000000);
	printSieve(false, test, (double) (end - start) / 1000, passes);
	free(test.arr);
}

struct Sieve {
	int n,
	bool* arr,
}

char* bool2str(bool b) {
	if (b)
		ret 'true';
	ret 'false';
}

bool validate(Sieve test, int count) {
	if (test.n == 10)
		ret count == 1;
	if (test.n == 100)
		ret count == 25;
	if (test.n == 1000)
		ret count == 168;
	if (test.n == 10000)
		ret count == 1229;
	if (test.n == 100000)
		ret count == 9592;
	if (test.n == 1000000)
		ret count == 78498;
	if (test.n == 10000000)
		ret count == 664579;
	if (test.n == 100000000)
		ret count == 5761455;
	ret false;
}

void printSieve(bool showResults, Sieve test, double duration, int passes) {
	int count = 1;
	if (showResults)
		printf('[ 2, ');
	for (int p = 3; p <= test.n; p += 1)
		if (getBit(test.arr, p)) {
			if (showResults)
				printf('%i, ', p);
			count += 1;
		}
	if (showResults)
		puts(' ]');
	
	printf('Passes: %i, Time: %g, Avg: %g, Limit: %i, Count: %i, Valid: %s\n', passes, duration, duration / (double) passes, test.n, count, bool2str(validate(test, count)));
}

bool getBit(bool* arr, int idx) {
	if (idx % 2 == 0)
		ret false;
	ret arr[idx / 2];
}

void clearBit(bool* arr, int idx) {
	arr[idx / 2] = false;
}

Sieve sieve(int n) {
	bool* arr = malloc((n + 1) / 2);
	memset(arr, true to byte, (n + 1) / 2);
	
	int factor = 3;
	int q = (int) sqrtf(n to float);
	
	while (factor <= q) {
		for (int x = factor; x <= n; x += 1) {
			if (getBit(arr, x)) {
				factor = x;
				break 2;
			}
		}
			
		for (int x = factor * 3; x <= n; x += factor * 2)
			clearBit(arr, x);
		factor += 2;
	}

	ret Sieve { n, arr };
}