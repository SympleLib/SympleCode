using byte* as Module;
using byte as GLFWwindow;

void run() {
	puts('hi');
	loadGLFW();
	
	if (glfwInit() == false) {
		puts('glfw not init');
		ret;
	}
	
	puts('glfw init');
		
	GLFWwindow* wnd = glfwCreateWindow(720, 720, 'Hello, world!', null, null);
	if (wnd == null) {
		puts('window no make');
		glfwTerminate();
		ret;
	}
	
	glfwMakeContextCurrent(wnd);
	glfwSwapInterval(1);
	
	loadGL();
	
	glClearColor(.25, .25, .25, 1);
	
	glfwSetFramebufferSizeCallback(wnd, fbszcb);
	
	while (glfwWindowShouldClose(wnd) == false) {
		glClear(16384); // GL_COLOR_BUFFER_BIT
		
		glColor3f(0, 1, 0); // green
		
		glBegin(7); // GL_QUADS
		glVertex2f(-.5, -.5);
		glVertex2f(+.5, -.5);
		glVertex2f(+.5, +.5);
		glVertex2f(-.5, +.5);
		glEnd();
		
		glfwSwapBuffers(wnd);
		glfwPollEvents();
	}
	
	glfwTerminate();
}

void fbszcb(GLFWwindow*, int w, int h) {
	glViewport(0, 0, w, h);
}

// IGNORE ALL BELOW THIS POINT ---
/*
I was too lazy to re-link every time I debug my code,
so this is a work-around
*/

decl Module LoadLibraryA(char* name);
decl byte* GetProcAddress(Module, char* name);
decl void puts(char*);

bool()* glfwInit;
void()* glfwTerminate;
GLFWwindow*(int, int, char*, byte*, byte*)* glfwCreateWindow;
void(GLFWwindow*)* glfwMakeContextCurrent;
bool(GLFWwindow*)* glfwWindowShouldClose;
void(GLFWwindow*)* glfwSwapBuffers;
void()* glfwPollEvents;
void(int)* glfwSwapInterval;
void(GLFWwindow*, byte*)* glfwSetFramebufferSizeCallback;

void loadGLFW() {
	Module glfw = LoadLibraryA('glfw');
	if (glfw == null) {
		puts('glfw not loaded');
		ret;
	}
	
	glfwInit = GetProcAddress(glfw, 'glfwInit');
	glfwTerminate = GetProcAddress(glfw, 'glfwTerminate');
	glfwCreateWindow = GetProcAddress(glfw, 'glfwCreateWindow');
	glfwMakeContextCurrent = GetProcAddress(glfw, 'glfwMakeContextCurrent');
	glfwWindowShouldClose = GetProcAddress(glfw, 'glfwWindowShouldClose');
	glfwSwapBuffers = GetProcAddress(glfw, 'glfwSwapBuffers');
	glfwPollEvents = GetProcAddress(glfw, 'glfwPollEvents');
	glfwSwapInterval = GetProcAddress(glfw, 'glfwSwapInterval');
	glfwSetFramebufferSizeCallback = GetProcAddress(glfw, 'glfwSetFramebufferSizeCallback');
}

void(int)* glClear;
void(float, float, float, float)* glClearColor;
void(int, int, int, int)* glViewport;
void(int)* glBegin;
void()* glEnd;
void(float, float)* glVertex2f;
void(float, float, float)* glColor3f;

void loadGL() {
	Module gl = LoadLibraryA('opengl32');
	if (gl == null) {
		puts('gl not loaded');
		ret;
	}
	
	glClear = GetProcAddress(gl, 'glClear');
	glClearColor = GetProcAddress(gl, 'glClearColor');
	glViewport = GetProcAddress(gl, 'glViewport');
	glBegin = GetProcAddress(gl, 'glBegin');
	glEnd = GetProcAddress(gl, 'glEnd');
	glVertex2f = GetProcAddress(gl, 'glVertex2f');
	glColor3f = GetProcAddress(gl, 'glColor3f');
}